import { useDungeonStore } from '@/stores/dungeon';
import { useEnemyStore } from '@/stores/enemy';
import { Player, Position, Direction } from '@/types';

interface Enemy extends Player {
  id: string;
}

export const useEnemyBehavior = () => {
  const dungeonStore = useDungeonStore();
  const enemyStore = useEnemyStore();

  const updateEnemyPosition = (enemy: Enemy, newPosition: Position, direction: Direction) => {
    enemyStore.updateEnemyPosition(enemy.id, newPosition);
    enemyStore.updateEnemyDirection(enemy.id, direction);
    enemyStore.updateEnemyAction(enemy.id, 'walk');
  };

  const patrol = (enemy: Enemy) => {
    const patrolSpeed = 1; // Скорость патрулирования
    let patrolDirection: { x: number; y: number } = {
      x: Math.random() < 0.5 ? -1 : 1,
      y: Math.random() < 0.5 ? -1 : 1,
    };
    let newPosition: Position = { ...enemy.state.position };
    
    const handlePatrol = () => {
      const deltaX = patrolDirection.x * patrolSpeed;
      const deltaY = patrolDirection.y * patrolSpeed;
  
      const cellTypeX = dungeonStore.getCellType(newPosition.x + deltaX, newPosition.y);
      const cellTypeY = dungeonStore.getCellType(newPosition.x, newPosition.y + deltaY);
  
      if (cellTypeX !== 'wall') {
        newPosition.x += deltaX;
      } else {
        patrolDirection.x *= -1; // Меняем направление по оси X
      }
  
      if (cellTypeY !== 'wall') {
        newPosition.y += deltaY;
      } else {
        patrolDirection.y *= -1; // Меняем направление по оси Y
      }
  
      // Обновляем направление
      if (patrolDirection.x < 0) {
        enemy.state.direction = 'left';
      } else {
        enemy.state.direction = 'right';
      }
  
      updateEnemyPosition(enemy, newPosition, enemy.state.direction);
      requestAnimationFrame(handlePatrol); // Запускаем следующий шаг патрулирования
    };
  
    handlePatrol(); // Запускаем патрулирование
  };

  const detectPlayer = (enemy: Enemy, playerPosition: Position, detectionRange: number) => {
    const distance = Math.hypot(
      playerPosition.x - enemy.state.position.x,
      playerPosition.y - enemy.state.position.y
    );

    if (distance < detectionRange) {
      enemy.state.action = 'run';
      chasePlayer(enemy, playerPosition);
    }
  };

  const chasePlayer = (enemy: Enemy, playerPosition: Position) => {
    const speed = 2; // Скорость преследования
    const handleChase = () => {
      const deltaX = playerPosition.x - enemy.state.position.x;
      const deltaY = playerPosition.y - enemy.state.position.y;
      const distance = Math.hypot(deltaX, deltaY);

      // Нормализуем вектор направления
      const directionX = (deltaX / distance) * speed;
      const directionY = (deltaY / distance) * speed;

      const cellTypeX = dungeonStore.getCellType(enemy.state.position.x + directionX, enemy.state.position.y);
      const cellTypeY = dungeonStore.getCellType(enemy.state.position.x, enemy.state.position.y + directionY);

      if (cellTypeX !== 'wall') {
        enemy.state.position.x += directionX;
      }

      if (cellTypeY !== 'wall') {
        enemy.state.position.y += directionY;
      }

      // Обновляем направление
      if (directionX < 0) {
        enemy.state.direction = 'left';
      } else {
        enemy.state.direction = 'right';
      }

      updateEnemyPosition(enemy, enemy.state.position, enemy.state.direction);

      if (distance < 50) { // Дистанция атаки
        enemy.state.action = 'attack';
        // Вставьте сюда логику атаки
      } else {
        requestAnimationFrame(handleChase);
      }
    };

    handleChase();
  };

  return { patrol, detectPlayer };
};
